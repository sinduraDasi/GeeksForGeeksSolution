Given two strings S1 and S2 in lowercase, the task is to make them anagram. The only allowed operation is to remove a character from any string. Find the minimum number of characters to be deleted to make both the strings anagram. Two strings are called anagram of each other if one of them can be converted into another by rearranging its letters.

Example 1:

Input:
S1 = bcadeh
S2 = hea
Output: 3
Explanation: We need to remove b, c
and d from S1.
Example 2:

Input:
S1 = cddgk
S2 = gcd
Output: 2
Explanation: We need to remove d and
k from S1.
Your Task:
Complete the function remAnagram() which takes two strings S1, S2 as input parameter, and returns minimum characters needs to be deleted.

Expected Time Complexity: O(max(|S1|, |S2|)), where |S| = length of string S.
Expected Auxiliary Space: O(26)

Constraints:
1 <= |S1|, |S2| <= 105


Solution:
def remAnagram(str1,str2):
    char_count = {}

    # Count frequency of characters in S1
    for char in str1:
        char_count[char] = char_count.get(char, 0) + 1

    # Decrement the counts based on characters in S2
    for char in str2:
        if char in char_count:
            char_count[char] -= 1
        else:
            # If the character is in S2 but not in S1, we need to remove it
            char_count[char] = -1
            
    remaining_chars = sum(abs(count) for count in char_count.values())
    # Calculate the total count of characters remaining in S1
    return remaining_chars
